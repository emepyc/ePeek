host: 127.0.0.1
port: 4001
safe: true
baseurl : /tnt
api :
    - name : tnt
      elements :
           - name : TnT
             elements :
                - name : tnt
                  path :
                  args : null
                  desc : creates a new TnT Visualisation
                  full : Creates a new TnT Visualisation. It can be configured via several methods described below.
                  example : |
                    var vis = tnt();

                - name : tree
                  path : tnt
                  args : tnt.tree
                  desc : sets the tree to the visualisation
                  full : Sets the tree (ie the tnt.tree) to the TnT visualisation. If called without arguments, retrieves the current tree.
                  example : |
                    var tree = tnt.tree()
                        .data (tnt.tree.parse_newick (newick));
                        // other methods to configure the tree

                    var vis = tnt()
                        .tree (tree);

                - name : board
                  path : tnt
                  args : tnt.board
                  desc : sets the annotation board to the visualisation
                  full : Sets the annotation board (ie the tnt.board) to the TnT visualisation. If called without arguments, retrieves the current board.
                  example : |
                    var board = tnt.board()
                        .from (0)
                        .to (1000)
                        .width (400)
                        .max (1000);

                    var ta = tnt()
                        .board (board);

                - name : track
                  path : tnt
                  args : callback
                  desc : sets a callback to create new tracks based on tree leaves
                  full : Sets a callback to create new tracks based on tree leaves. The callback receives a tnt.tree.node and must return a tnt.track. This callback is used by tnt to create the tracks in the board. It is called when the visualisation is started and every time it is <i>updated</i> (using the tnt.<a href="#update">update</a> method). The tracks are re-created dynamically if a new callback is set after the visualisation has started. If called without arguments returns the current callback.
                  example : |
                    var track = function (leaf) {
                        var sp = leaf.name;
                        return tnt.track()
                            .color ('#E8E8E8')
                            .data (tnt.track.data.sync()
                                .retriever (function () {
                                    return data[source][sp] || [];
                                })
                            )

                            .display (...);
                    };

                    var vis = tnt()
                        .tree (...)
                        .board (...)
                        .track (track);

                    vis (div);

                - name : update
                  path : tnt
                  args : null
                  desc : dynamically updates both the tree and the board
                  full : Dynamically updates the tree and the board of the visualisation. If the leaves are re-ordered, collapsed, etc, their associated tracks are updated accordingly
                  example : |
                    var vis = tnt()
                        .tree (tree)
                        .board (board)
                        .track (track);

                    vis(div);

                    // Toggle one node and update the visualisation
                    tree.root().find_node_by_name ('Mammals').toggle();
                    vis.update();

                - name : top
                  path : tnt
                  args : tnt.board.track
                  desc : sets the top track to be displayed in the board
                  full : Sets the top track to be displayed in the board. This track will not be part of the tracks being linked to the tree leaves. Typically this can be an axis, but can be configured as required.
                  example: |
                    var axis_top = tnt.board.track()
                            .height(0)
                            .color("white")
                            .display(tnt.board.track.feature.axis()
                                .orientation("top")
                            );
                    tnt()
                        .top(axis_top)

                - name : bottom
                  path : tnt
                  args : tnt.board.track
                  desc : sets the bottom track to be displayed in the board
                  full : Sets the bottom track to be displayed in the board. This track will not be part of the tracks being linked to the tree leaves. Typically this can be an axis, but can be configured as required.
                  example: |
                    var axis_bottom = tnt.board.track()
                            .height(0)
                            .color("white")
                            .display(tnt.board.track.feature.axis()
                                .orientation("bottom")
                            );
                    tnt()
                        .top(axis_bottom)

                - name : key
                  path : tnt
                  args : string | callback
                  desc : specifies the key used to link tree nodes and tracks
                  full : Specifies the key to be used when linking tree nodes and tracks. By default, the nodes and the tracks are linked by internal IDs transparent to the user. If some kind of object constancy (node constancy) is required, it is possible to define a different way to link leaves and tracks. This new key can be defined either using a field name in the data or a callback that would be called on each leaf when creating or updating tracks. This callback is called with the leaf node (ie the tnt.tree.node) as its argument.
                  example : |
                    var newick1 = '((human, chimp), (mouse, rat));';
                    var newick2 = '(((human, chimp), mouse), zebrafish)';

                    var tree1 = tnt.tree.parse_newick (newick1);
                    var tree2 = tnt.tree.parse_newick (newick2);

                    var vis = tnt()
                        .tree (tree1);
                        .key ('name'); // or .key (function (node) { return node.node_name() });

                    // at some later point... a new tree is set in the tree annot. Because this is a different tree, if no key is defined for the tree annotation, no track constancy or node constancy would not be performed, but because we are using the 'name' field of the node to link leaves and tracks, when using the second tree, the common leaves (ie 'human, 'chimp' and 'mouse') and their associated annotation would be maintained
                    vis
                        .tree (tree2)
                        .update();
