host: 127.0.0.1
port: 4001
safe: true
pygments: true
baseurl : /tnt
api :
    - name : tree
      elements :
           - name : Tree Visualization
             preamble : |
                        Trees can be created using the tnt.tree method. The returned tree is configurable via the methods explained below. An example of use looks like:
             example : |
                        var tnt = tnt.tree()
                                     .data (tnt.tree.parse_newick (newick))
                                     .layout (tnt.tree.layout.vertical()
                                              .width (650))
                                     .label (tnt.tree.label.text()
                                              .height(15))
             elements :
                - name : tree
                  path : tnt
                  args : null
                  desc : creates a new tree visualization
                  full : Creates a new tree visualization. This tree visualization needs to be configured via its public methods explained below.
                  example : |
                         var tnt = tnt.tree()
                         tnt (document.getElementById ('my_div'));
                - name : data
                  path : tree
                  args : object
                  desc : sets the tree data (in pure javascript)
                  full : Sets the data to be used in the tree visualization (the tree). This tree needs to be a tree like structure in JSON format like the one shown below. This JSON object can be obtained with <a href="#parse_newick">tnt.tree.parse_json</a> or <a href="#parse_nhx">tnt.tree.parse_nhx</a>
                  example : |
                         var tree_obj = {
                            name: "F",
                            children: [
                               {name: "A", length: 0.1},
                               {name: "B", length: 0.2},
                               {
                                  name: "E",
                                  length: 0.5,
                                  children: [
                                     {name: "C", length: 0.3},
                                     {name: "D", length: 0.4}
                                  ]
                                }
                            ]
                         };
                         var tree_vis = tnt.tree()
                                           .data(tree_obj);
                - name : duration
                  path : tree
                  args : number
                  desc : specifies duration of the tree transitions
                  full : Specifies the duration of the transitions on trees. If no argument is provided it returns the current duration. By default this value is 500ms
                  example : |
                            var tree_vis = tnt.tree()
                                             .duration(750);
                            tree_vis.duration(); // returns 750
                - name : on_click
                  path : tree
                  args : callback
                  desc : specifies the behaviour on nodes when they are clicked [REVISE]
                  full : Specifies the behaviour of the node when they are clicked. It accepts a callback that is called every time a click event is fired on a node. This callback receives the node as its argument. By default the nodes do not react to mouse clicks.
                  example : |
                            var tree_vis = tnt.tree()

                            // collapse node on click
                            tree_vis.on_click (function (node) {
                                node.toggle (node)
                                tree_vis.update();
                            });

                            // show a tooltip on click
                            tree_vis.on_click (tree_vis.tooltip());
                - name : on_dbl_lick
                  path : tree
                  args : callback
                  desc : specifies the behaviour on nodes when they are double-clicked [REVISE]
                  full : Specifies the behaviour of nodes when they are double clicked. It accepts a callback that is called every time a double click event is fired on a node. This callback receives the node as its argument. By default the nodes do not react to mouse clicks
                  example : null
                - name : link_color
                  path : tree
                  args : string | callback
                  desc : specifies the color of branches [REVISE]
                  full : Specifies the color of the branches in the tree. This color can be given as a string specifying the name of the color (like "blue") or its hexadecimal code (like '#00FF00'). To get per branch colors use a callback instead. This callback will be called on each branch with the source and destination nodes (ie. tnt.tree.node objects).
                  example : |
                            var tree_vis = tnt.tree()
                                             .link_color (function (source, target) {
                                                var color = 'grey';
                                                var source_data = source.data();
                                                var target_data = target.data();
                                                switch (source_data.type) {
                                                    case "speciation" :
                                                      color = "green";
                                                      break;
                                                    case "duplication" :
                                                      color = "red";
                                                      break;
                                                }
                                                return color;
                                             });
                - name : node_color
                  path : tree
                  args : string | callback
                  desc : specifies the color of nodes [REVISE]
                  full : Specifies the color of the nodes in the tree. This color can be given as a string specifying the name of the color (like "blue") or its hexadecimal code (like "#00FF00"). To get per node colors use a callback instead. This callback will be called on each node with the node object (ie. a tnt.tree.node object).
                  example : |
                            var tree_vis = tnt.tree()
                                             .node_color (function (node) {
                                                if (node.is_leaf()) {
                                                   return 'black';
                                                }
                                                return 'none';
                                             });
                - name : node_circle_size
                  path : tree
                  args : integer | callback
                  desc : specifies the size of the nodes [REVISE]
                  full : Specifies the size of the node in pixels. To get per node sizes use a cllback instead. This callback will be called on each node with the node object (ie. a tnt.tree.node object).
                  example : |
                            var tree_vis = tnt.tree()
                                            .node_circle_size (function (node)) {
                                                if (node.is_leaf()) {
                                                  return 4;
                                                }
                                                return 0;
                                            });
           - name : Nodes
             preamble : |
                        TnT provides several methods for tree manipulation, these include nodes searching, mapping callbacks to nodes, etc. Instead of providing these methods to the tree visualization objects, TnT provides a special object for these operations. These objects can be obtained using the <a href="#root">root</a> method on the tree visualization object. Since the tree data object is completely separated from the visualization, it is also possible to use them directly using the <i>tnt.tree.node</i> method in tnt. For example
             example : |
                       var tree_vis = tnt.tree()
                                        .data (tnt.tree.parse_newick (newick))

                       // tree data obtained from the visualization
                       var root = tree_vis.root();

                       // get the node with name 'human' and 'mouse'
                       var human_node = root.find_node_by_field ('human', 'name');
                       var mouse_node = root.find_node_by_field ('mouse', 'name');

                       // get the node that is the lca of human and mouse
                       var lca = root.lca ([human_node, mouse_node]);

                       // lca is a tnt.tree.node itself
                       lca.find_node_by_field('human', 'name');

                       // nodes can also be obtained independently of the visualization...
                       // ... via the parse_newick or parse_nhx methods
                       var root = tnt.tree.parse_newick (newick);

                       // ... or passing a json object directly to tnt.tree.node()
                       var root = tnt.tree.node(tree_object);
                       var human_node = root.find_node_by_field ('human', 'name');
             elements :
                - name : tree
                  path : root
                  args : null
                  desc : retrieves the root node of the tree used in the visualization
                  full : Retrieves the root node of the tree used in the visualization. This object is used to manipulate and query the tree in different ways (see below for the supported methods).
                  example : |
                            var tree_vis = tnt.tree()
                                             .data (tnt.tree.parse_newick (newick));
                            var root = tree_vis.root();
                - name : data
                  path : node
                  args : null
                  desc : retrieves the tree JSON object
                  full : Retrieves the tree JSON object. This is the same JSON object used to set up the tree with all the original fields.
                  example : |
                            var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                            // javascript object of the tree (JSON)
                            var tree_object = tree_data.data();
                - name : find_node_by_field
                  path : node
                  args : value, string | callback
                  desc : retrieves a node based on a field
                  full : Retrieves a node based on a given field. This method accepts two parameters, the first one being the searched value (string, numeric, etc...), the second one can be a field name in the tree object or a callback that knows how to reach that value. This callback is called with the node information. The returned node is also a node object itself. For example
                  example : |
                            var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                            // Using a field name
                            var node = root.find_node_by_field ('human', 'common_name');

                            // Using a callback (for example, common_name is not a top level field in the tree object)
                            var node = root.find_node_by_field ('human', function (node) {
                               return node.taxonomy.common_name;
                            });
                - name : find_node_by_name
                  path : node
                  args : string
                  desc : retrieves a node based on its name field
                  full : Retrieves a node based on its 'name' field. This is a special case of <a href="#find_node_by_field">find_node_by_field</a>
                  example : null
                - name : toggle
                  path : node
                  args : null
                  desc : collapses / uncollapses the branch at the current node [REVISE]
                  full : Toggles collapsibility of the current branch at the current node. If the current node is not collapsed, it collapses it, if it is already collapsed, it uncollapses it.
                  example : |
                            var tree_vis = tnt.tree()
                                             .data(...)
                                             .layout(...);
                            tree_vis.on_click (function (node) {
                                node.toggle();
                                tree_vis.update();
                            });
                - name : is_collapsed
                  path : data
                  args : null
                  desc : returns true on collapsed nodes [REVISE -- Only on terminals? Should not be on any node with a collpased node upstream?]
                  full : Returns true if the branch is collapsed at the current node
                  example : null
                - name : lca
                  path : node
                  args : [node1, node2, ...]
                  desc : returns the lowest common ancestor of a set of leaves
                  full : Returns the lowest common ancestor node of a set of leaves. These leaves have to be downstream the current node
                  example : |
                            var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                            var human_node = root.find_node_by_name('human');
                            var mouse_node = root.find_node_by_name('mouse');
                            var lca_node = root.lca(human_node, mouse_node);
                - name : get_all_nodes
                  path : node
                  args : null
                  desc : returns a list with all the nodes in the tree
                  full : Returns a list containing all the nodes present in the tree. These nodes are tnt.tree.node objects
                  example : |
                            var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                            var nodes = root.get_all_nodes();
                - name : get_all_leaves
                  path : node
                  args : null
                  desc : returns all the leaves under the node
                  full : Returns all the leaves under the current node. These leaves are returned as nodes
                - name : upstream
                  path : node
                  args : callback
                  desc : applies a callback to all the upstream nodes of the current node
                  full : Applies the passed callback to all the ancestors of the current node. This callback is called passing each node as its argument. The ancestors are passed in order until the root of the tree is reached.
                  example : |
                            var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                            var human_node = root.find_node_by_name ('human');
                            human_node.upstream (function (node) {
                               // this callback is called with all the upstream nodes to human_node
                               // until the root node is reached (included)
                            });
                - name : subtree
                  path : node
                  args : [node1, node2, ...]
                  desc : returns a new subtree given a set of leaves
                  full : Returns the root of a new tree that has been made by calculating the lowest common ancestor of the given leaves, pruning the singleton nodes and copying the resulting tree into a new tree structure. This method is used by the library to create new tree structures based on the initial one. Its argument is an array of leaves. Because the returned subtree has copies of the original nodes, changing the former does not affect the latter.
                  example : |
                            var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                            var leaves = ... // get leaves
                            var subtree = root.subtree (leaves);
                - name : present
                  path : node
                  args : callback
                  desc : tests all the descendants of the current node using a callback
                  full : Tests all the downstream nodes of the current node using the given callback. This callback on every node. The callback should explicitely return 'true' or 'false'
                  example : |
                            var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                            root.present (function (node) {
                               return (node.property ('my_field') === 1);
                            });
                - name : sort
                  path : node
                  args : callback
                  desc : orders the descendant nodes based on the given callback
                  full : Recursively orders the children of each downstream node based on the given callback. This ordering does not affect the tree topology. The given callback is called on each pair of children and both nodes are passed as its arguments. As with a normal javascript sort function, this callback is expected to return -1, 0 or 1 if the first node should go before the second, if there is a tie or if the second should go before the first respectively (see the <a href="http://www.w3schools.com/jsref/jsref_sort.asp">javascript sort function documentation</a> for details)
                  example : |
                            // Helper function to get the lowest value in
                            // the subnode -- this is used in the sort cbak
                            var get_highest_val = function (node, prop) {
                               var highest = 0;
                               node.apply(function (n) {
                                  if (n.property(prop) === "") {
                                      return;
                                  }
                                  var val = parseFloat(n.property(prop));
                                  if (val > highest) {
                                     highest = val;
                                  }
                               });
                              return highest;
                            };

                            var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                            root.sort (function (node1, node2) {
                                var highest1 = get_highest_val (node1, 'length');
                                var highest2 = get_highest_val (node2, 'length');
                                return highest1 - highest2;
                            });
                - name : apply
                  path : node
                  args : callback
                  desc : applies the given callback to all the descendants of the node
                  full : Recursively applies the given callback to each children of the current node. The node is passed to the callback as its argument. See <a href="#sort">node.sort</a> for a example
                  example : |
                            var root = tnt.tree.root (tnt.tree.parse_newick (newick));
                            root.apply (function (node) {
                              // Process the node
                            });
                - name : property
                  path : node
                  args : string | callback, value
                  desc : allows access to properties in the nodes data
                  full : Allows access to data properties in the current node. The first parameter is mandatory and corresponds with the data field to be accessed. If a second parameter is provided, the method sets the field with this value, if it is not provided, it returns the field. If a callback is used as its first parameter, it is treated as a way to access the field (for example if it is a deeper field in the node structure). For example
                  example : |
                            var tree_obj = {
                               name: "F",
                               deeper : { field : 1 },
                               children: [
                                  {name: "A", length: 0.1},
                                  {name: "B", length: 0.2},
                                  {
                                     name: "E",
                                     length: 0.5,
                                     children: [
                                        {name: "C", length: 0.3},
                                        {name: "D", length: 0.4}
                                     ]
                                  }
                               ]
                            };

                            var root = tnt.tree.node (tnt.tree.parse_newick (newick));

                            // As a getter:
                            root.property ('name'); // returns "F"
                            root.property (function (node) {
                                 return node.deeper.field;
                            }); // returns 1

                            // As a setter:
                            root.property ('name', 'A');
                            root.property (function (node, value) {
                                 node.deeper.new_field = value;
                            }, 2);
                - name : is_leaf
                  path : node
                  args : null
                  desc : returns true on leaves
                  full : Returns true if the current node is a leaf, false otherwise;
                  example : |
                            var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                            root.apply (function (node) {
                                if (node.is_leaf()) {
                                   console.log (node.node_name() + " is a leaf node");
                                } else {
                                   console.log (node.node_name() + " is an internal node");
                                }
                            });
                - name : node_name
                  path : node
                  args : null
                  desc : returns the property 'name' of nodes [REVISE]
                  full : Returns the property 'name' of the current node. It is an alias of node.<a href="#find_node_by_field">find_node_by_field</a> using 'name' as its value
                  example : |
                            var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                            var name = root.node_name();
                - name : root_dist
                  path : node
                  args : null
                  desc : returns the distance of the node to the root based on branch lengths
                  full : Returns the distance of the current node to the root based on the branch lengths of the tree
                  example : |
                            var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                            root.apply (function (node) {
                               console.log ("Distance to root: " + node.root_dis());
                            });
                - name : children
                  path : node
                  desc : returns all the children of the node
                  full : Returns an array with all the children of the current node
                  example : |
                            var root = tnt.tree.node (tnt.tree.parse_newick (newick));
                            console.log (root.node_name + " has " + root.children().length + " children";
                - name : parent
                  path : node
                  args : null
                  desc : returns the parent of the node
                  full : Returns the parent node of the current node
           - name : Layouts
             preamble : The layout specifies the shape of the tree. Currently TnT supports two types of trees, "vertical" and "radial". Both layouts have a set of methods that control different aspects. For example
             example : |
                       var tree_vis = tnt.tree()
                                         .data (tnt.tree.parse_newick (newick))
                                         .layout (tnt.tree.layout.vertical()
                                                     .width (400)
                                                     .scale (false)
                                         );
             elements :
                - name : layout
                  path : tree
                  args : tnt.tree.layout
                  desc : specifies the layout to be used in the tree visualization
                  full : Specifies the layout to be used in the tree visualization. Accepts an optional argument of type tnt.tree.layout. If called without arguments, returns the current layout object
                  example : |
                            var tree_vis = tnt.tree()
                                             .layout (tnt.tree.layout.vertical());
                - name : scale
                  path : tree.layout
                  args : boolean
                  desc : specifies if the branches should be scaled based on branch lengths
                  full : Specifies if the branches should be scaled based on branch lengths or not by passing <i>true</i> or <i>false</i> false to the method.
                  example : |
                            var layout = tnt.tree.layout.radial()
                                            .scale(true);
                - name : width
                  path : tree.layout
                  args : integer | string
                  desc : specifies the width of the tree layout
                  full : Specifies the width of the tree layout
                  example : |
                            var layout = tnt.tree.layout.vertical()
                                            .width(300)
                - name : vertical
                  path : tree.layout
                  args : null
                  desc : vertical layout
                  full : Returns a vertical layout. This layout is a tnt.tree.layout, so it has all the methods explained above for tnt.tree.layout objects
                  example : |
                            var layout = tnt.tree.layout.vertical();
                - name : radial
                  path : tree.layout
                  args : null
                  desc : radial layout
                  full : Returns a radial layout. This layout is a tnt.tree.layout, so it has all the methods explained above for tnt.tree.layout objects
                  example : |
                            var layout = tnt.tree.layout.radial();
           - name : Labels
             preamble : TnT labels specify the information that appears beside the nodes. By default a <a href="#text">tnt.tree.label.text</a> is used and the 'name' field of the node data is used. See below for different examples of labels
             example : |
                       var tree_vis = tnt.tree()
                                        .data(...)
                                        .display(...)
                                        label (tnt.tree.label.text()
                                                 .height (20)
                                                 text (function (node) {
                                                    return node.data().scientific_name;
                                                 });
             elements :
                - name : label
                  path : tree
                  args : tnt.tree.label
                  desc : specifies the label type to be used in the tree visualization
                  full : Specifies the label to be used in the tree visualization. Accepts an optional argument of type tnt.tree.label. If called without parameters, returns the current label object
                  example : |
                            var tree_vis = tnt.tree()
                                            .label (tnt.tree.label());
                - name : height
                  path : tree.label
                  args : integer | string
                  desc : specifies the height of the label
                  full : Specifies the height of the label. If called without arguments returns the current height for the label
                  example : |
                            var label = tnt.tree.label()
                                          .height (30);
                - name : text
                  path : tree.label
                  args : null
                  desc : text based labels
                  full : Returns a label of type <i>text</i>
                  example : |
                            var label = tnt.tree.label.text();
                - name : fontsize
                  path : tree.label.text
                  args : integer
                  desc : sets the fontsize of the label
                  full : Sets the fontsize of the text label.
                  example : |
                            var text_label = tnt.tree.label.text()
                                .fontsize (9);
                - name : color
                  path : tree.label.text
                  args : string | callback
                  desc : sets the color of the text
                  full : Specifies the color of the text label. This color can be given as a string specifying the name of the color (like "black") or its hexadecimal code (like '#000000'). To get per label colors use a callback instead. This callback will be called on each node passing the tnt.tree.node object as its argument.
                  example : |
                            var text_label = tnt.tree.label.text()
                                .color (function (node) {
                                   if (node.is_leaf()) {
                                      return 'black';
                                   }
                                   return 'blue';
                                });
                - name : text
                  path : tree.label.text
                  args : string | callback
                  desc : specifies the field to inspect for names
                  full : Specifies the text to be displayed in the text label. The argument can be a literal string or a callback. If the latter, the callback is called with the node object (ie the tnt.tree.node) as its argument
                  example : |
                            var label = tnt.tree.label.text()
                                .text (function (node) {
                                  return node.data().scientific_name; 
                                });
                - name : img
                  path : tree.label
                  args : null
                  desc : image based labels
                  full : Returns a label of type <i>image</i>
                  example : |
                            var img_label = tnt.tree.label.img()
                               .src (function (node) {
                                  return names[node.node_name()]
                               })
                               .width (function () {
                                  return 50;
                               })
                               .height (function () {
                                  return 50;
                               });
                - name : src
                  path : tree.label.img
                  args : callback
                  desc : specifies the path where the image labels can be found
                  full : Specifies the path where the image labels are to be found. The argument is a callback that is called on each node with the node object (ie the tnt.tree.node) as its argument
                  example : |
                            var img_label = tnt.tree.label.img()
                               .src (function (node) {
                                 return "path_to_img/" + node.property('scientific_name');
                               });
                - name : composite
                  path : tree.label
                  args : null
                  desc : labels made of two or more simple labels
                  full : Returns a label made of two or more simple labels
                  example : |
                            var img_label = tnt.tree.label.img()
                               .src (function (node) {
                                  return names[node.node_name()]
                               })
                               .width (function () {
                                  return 50;
                               })
                               .height (function () {
                                  return 50;
                               });

                            var text_label = tnt.tree.label.text()
                               text (function (node) {
                                 return node.node_name();
                               });
                            var comp_label = tnt.tree.label.composite()
                               .add_label (img_label)
                               .add_label (text_label);
                - name : composite.add_label
                  path : tree.label.composite
                  args : tnttree.label
                  desc : adds a new simple label to the composite label
                  full : Addes a new simple label to the composite label. The order of the added labels is important because the new labels are moved right to accommodate previous ones
                  example : |
                         var composite_label = tnt.tree.label.composite()
                            .add_label(tnt.tree.label.img()
                              .src (...)
                              .width (...)
                              .height (...)
                            .add_label(tnt.tree.label.text()
                              .text (...)
                            );
                - name : remove
                  path : tree.label.composite
                  args : null
                  desc : removes the simple labels from the composite
                  full : Removes the simple labels from the composite
                  example : null
           - name : Annotation
             preamble : If you want to add track based information to your tree, a higher level object is needed to align and synchronize tree leaves and tracks. This higher level object is <i>tnt.tree_annot</i>, which accepts a tree, a board and a function that knows how to create tracks given a leaf and creates a combined visualization with both entities
             example : |
                       // Create a tree
                       var tree = tnt.tree()
                          .data (tnt.tree.parse_newick (newick))
                          .layout (tnt.tree.layout.vertical()
                             .width (500)
                             .scale (false))
                          .label (tnt.tree.label.text()
                             .height (20);

                       // Create a board
                       var annot = tnt.board()
                          .from (0)
                          .to (1000)
                          .width (400)
                          .right (1000);

                       // Create a function that knows hot to do a track given a leaf
                       var track = function (leaf) {
                          var sp = leaf.node_name();
                          return tnt.track()
                            .background_color ("#EBF5FF")
                            .data (tnt.track.data()
                               .update (tnt.track.retriever.sync()
                                   .retriever (function () {
                                      return data[sp] || [];
                                   })
                               )
                            .display (tnt.track.feature.ensembl()
                               .foreground_color ("steelblue")
                               .index (function (d) {
                                   return d.start;
                               })
                            );
                       };

                       var tree_annot = tnt.tree_annot()
                         .tree (tree)
                         .annotation (board)
                         .ruler ("both")
                         .track (track):

                       tree_annot(div);
             elements :
                - name : tree
                  desc : sets the tree part of the annotated tree
                - name : annotation
                  desc : sets the annotation part of the annotated tree
                - name : track
                  desc : specifies a callback to use to create new tracks based on leaves
                - name : update
                  desc : updates both the tree and the annotation
                - name : ruler
                  desc : sets the ruler/s to be displayd in the annotation
                - name : key
                  desc : specifies the key used to link tree nodes and tracks
           - name : Input trees
             elements :
                - name : tree.parse_newick
                  desc : parses newick formatted trees
                - name : tree.parse_nhx
                  desc : parses nhx formatted trees
    - name : track
      elements :
           - name : Track Visualization
             elements :
                - name : tnt.track
                  desc : defines a new track visualization
                - name : track.from
                  desc : defines the current lower coordinate
                - name : track.to
                  desc : defines the current upper coordinate
                - name : track.left
                  desc : defines the left limit (ie the minimum possible value) of the track
                - name : track.right
                  desc : defines the right limit (ie the maximum possible value) of the track
                - name : track.zoom_out
                  desc : defines the zoom out limit of the track
                - name : track.zoom_in
                  desc : defines the zoom in limit of the track
                - name : track.start
                  desc : starts (or re-starts) the visualization
                - name : track.move_right
                  desc : moves the track right the specified amount
                - name : track.move_left
                  desc : moves the track left the specified amount
                - name : track.zoom
                  desc : zooms in/out the track the specified amount
                - name : track.reorder
                  desc : reorders the tracks based on the array of tracks given as argument
                - name : track.add_track
                  desc : adds a new track to the track visualization
                - name : track.remove_track
                  desc : removes the specified track from the visualization
                - name : track.tracks
                  desc : returns all the tracks in the visualization
                - name : track.width
                  desc : specifies the width of the track visualization
                - name : track.allow_drag
                  desc : specifies the draggability of the tracks in the visualization
           - name : Tracks
             elements :
                - name : track.track
                  desc : defines the track object
                - name : track.background_color
                  desc : defines the background color of the track
                - name : track.height
                  desc : defines the height of the track
           - name : Data
             elements :
                - name : track.data
                  desc : base data object
                - name : data.update
                  desc : specifies how the data is updated
                - name : data.retriever.sync
                  desc : specifies a synchronous data retriever 
                - name : data.retriever.async
                  desc : specifies an asynchronous data retriever
                - name : async.url
                  desc : specifies a url for the asynchronous call
                - name : data.retriever.ensembl
                  desc : specifies a data retriever based on the Ensembl REST server
                - name : ensembl.endpoint
                  desc : specifies the Ensembl REST endpoint
                - name : track.data.gene
                  desc : updater using the ensembl retriever
                - name : track.data.empty
                  desc : updater for data independent tracks
           - name : Features
             elements :
                - name : track.feature
                  desc : base object for features
                - name : feature.foreground_color
                  desc : defines the foreground color of the elements
                - name : feature.info
                  desc : defines the info to display when an element is clicked [REVISE]
                - name : feature.create
                  desc : sets a new callback to create new elements
                - name : feature.mover
                  desc : sets a new callback to move the elements
                - name : feature.updater
                  desc : specifies how the current elements should be visualy updated
                - name : feature.guider
                  desc : defines the visual aspect not associated with elements
                - name : track.feature.block
                  desc : defines block based features
                - name : track.feature.axis
                  desc : defines axes based features
                - name : axis.orientation
                  desc : specifies the orientation of the axis feature
                - name : track.feature.location
                  desc : defines location based features
                - name : track.feature.ensembl
                  desc : defines track visualizations similar to the old Ensembl tracks in trees
                - name : track.feature.vline
                  desc : defines vertical lines elements
                - name : track.feature.sequence
                  desc : defines sequence elements
                - name : track.feature.gene
                  desc : defines gene like elements
                - name : track.feature.area
                  desc : defines area elements
                - name : track.feature.line
                  desc : defines line elements
                - name : line.tension
                  desc : defines the tension of the line
                - name : line.x
                  desc : defines the field to be used as the 'x' value
                - name : line.y
                  desc : defines the field to be used as the 'y' value
           - name : Layouts
             elements :
                - name : track.layout.identity
                  desc : defines layouts for tracks that doesn't need layouts
                - name : track.layout.feature
                  desc : defines a feature layout that avoids overlaps
                - name : feature.height
                  desc : sets the total height of the layout
                - name : feature.elements
                  desc : gets the elements in the layout
                - name : feature.scale
                  desc : specifies the scale to convert data to visualization coordinates
